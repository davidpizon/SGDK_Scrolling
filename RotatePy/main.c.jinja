#include <genesis.h>
#include "resources.h"
#include "{{ rotation_filename }}"

/////////////////////////////////////////////////////////////////////
// Scrolling Stuff
#define PLANE_MAX_TILE 64

#define ROWS_A {{ rows_a }}
#define START_ROW_A {{ start_row_a }}
#define END_ROW_A {{ end_row_a }}

#define COLS_A {{ cols_a }}
#define START_COL_A {{ start_col_a }}
#define END_COL_A {{ start_col_b }} 

extern s16 {{ prefix }}_hScroll[];
extern s16 {{ prefix }}_vScroll[];

s16 hScrollA[224];
s16 vScrollA[20];


int main(bool hard)
{
  VDP_setScreenWidth320();
  // set colors
  PAL_setPalette( PAL0, {{ bg_name}}_pal.data, CPU );
  PAL_setPalette( PAL1, {{ sprite_name }}_pal.data, CPU );

  // set scrolling mode to LINE for horizontal and TILE for vertical
  VDP_setScrollingMode(HSCROLL_LINE, VSCROLL_2TILE);

  // get tile positions in VRAM.
  int ind = TILE_USER_INDEX;
  int indexA = ind;
  // Load the plane tiles into VRAM
  VDP_loadTileSet({{bg_name}}.tileset, ind, DMA);

  // setup the tiles
  VDP_setTileMapEx(BG_A, {{ bg_name }}.tilemap, TILE_ATTR_FULL(PAL0, TRUE, FALSE, FALSE, indexA),
                   0,               // Plane X destination
                   0,               // plane Y destination
                   0,               // Region X start position
                   0,               // Region Y start position
                   PLANE_MAX_TILE, // width  (went with 64 becasue default width is 64.  Viewable screen is 40)
                   28,             // height
                   CPU);


  s16 currAngle = 0;
  s16 stepDir = 1;
  u8 angleDelay = 0;

  s16 xOffset = 0;
  s16 yOffset = 0;
  s16 yOffsetDir = 1;
  u8 offsetDelay = 0;

  SPR_init();

{% for name in target_list %}
  Sprite * {{name}}_sprite = NULL;
  int {{name}}_pos_x = {{name}}[currAngle*2]-8;
  int {{name}}_pos_y = {{name}}[currAngle*2+1]-8;
  {{name}}_sprite = SPR_addSprite( &crosshairs, {{name}}_pos_x, {{name}}_pos_y,  TILE_ATTR( PAL1, 1, FALSE, FALSE ));
 {% endfor %}

  while (TRUE)
  {

    // handle rotation
    ++angleDelay;
    if( angleDelay % 6 == 0 ) {
      currAngle += stepDir;
      if( currAngle >= SHIP_SCROLL_COUNT-2 ) {
        stepDir = -1;
        currAngle = 9;
      }else if (currAngle <0+2 ) {
        stepDir = 1;
        currAngle = 1;
      }
    }
    ++offsetDelay;
    if( offsetDelay % 3 == 0 ) {
      yOffset += yOffsetDir;
      if( yOffset > 40) {
        yOffsetDir = -1;
      }else if( yOffset < 0 ) {
        yOffsetDir = 1;
      }
      if( currAngle < 4) {
        xOffset+=2;
      } else if ( currAngle > 6) {
        xOffset-=2;
      }
    }


    // could unroll loops to eliminate some overhead
    for(int i=0; i < ROWS_A; ++i ) {
      hScrollA[ i ] = {{ prefix }}_hScroll[ currAngle * ROWS_A + i] + xOffset;
    }
    for (int i = 0; i < COLS_A; ++i)
    {
      vScrollA[i] = {{ prefix }}_vScroll[currAngle * COLS_A + i] + yOffset;
    }

{% for name in target_list %}
    {{name}}_pos_x = {{name}}[currAngle * 2]-8 + xOffset;
    {{name}}_pos_y = {{name}}[currAngle * 2 + 1]-8 - yOffset;
    SPR_setPosition({{name}}_sprite, {{name}}_pos_x, {{name}}_pos_y);
{% endfor %}

    SPR_update();

    // set SGDK scrolling functions to fake the rotaiton.
    VDP_setHorizontalScrollLine(BG_A, START_ROW_A - yOffset, hScrollA, ROWS_A, DMA);
    VDP_setVerticalScrollTile(BG_A, START_COL_A, vScrollA, COLS_A, DMA);

    // let SGDK do its thing
    SYS_doVBlankProcess();
  }
  return 0;
}
